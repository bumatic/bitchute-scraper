# pytest.ini
[tool:pytest]
minversion = 6.0
addopts = 
    -ra 
    --strict-markers 
    --strict-config 
    --cov=bitchute 
    --cov-branch 
    --cov-report=term-missing 
    --cov-report=html:htmlcov 
    --cov-report=xml
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    performance: marks tests as performance tests (may take longer)
    api: marks tests that require API access
    unit: marks tests as unit tests
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# tox.ini
[tox]
envlist = py37,py38,py39,py310,py311,py312,flake8,mypy
isolated_build = True

[testenv]
deps = 
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    -r{toxinidir}/requirements.txt
commands =
    pytest {posargs}

[testenv:flake8]
deps = 
    flake8>=5.0.0
    flake8-docstrings
    flake8-import-order
commands = 
    flake8 bitchute tests

[testenv:mypy]
deps = 
    mypy>=1.0.0
    types-requests
    types-python-dateutil
commands = 
    mypy bitchute

[testenv:coverage]
deps = 
    coverage[toml]>=6.0
    pytest-cov>=4.0.0
commands =
    coverage run -m pytest
    coverage report
    coverage html

# .coveragerc
[run]
source = bitchute
omit = 
    */tests/*
    */test_*
    setup.py
    venv/*
    .venv/*
    .tox/*

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[html]
directory = htmlcov

# .github/workflows/tests.yml
name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.7'
          - os: macos-latest
            python-version: '3.7'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Chrome (for Selenium tests)
      if: matrix.os == 'ubuntu-latest'
      uses: browser-actions/setup-chrome@latest
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy types-requests types-python-dateutil
        mypy bitchute --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest --cov=bitchute --cov-report=xml --cov-report=term-missing -v
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run performance tests
      run: |
        pytest -m performance --tb=short -v
    
    - name: Benchmark report
      run: |
        python -